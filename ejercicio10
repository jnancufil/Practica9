
using System;
using System.IO; 
using System.Collections.Generic; 

namespace ejercicio10
{
    class Program
    {
        static void Main(string[] args)
        {
          
Textos listaT = new Textos(); 
cargaDeTextos(listaT);
for (int i = 0; i <= listaT.Count; i++){
	listaT.Item[i] =listaT.Item[i].Split(delimiterChars);  
}
List<string> both = listaT.Item[0].Intersec(listaT.Item[1]); 
List<PalabraPosiciones> nuevaLista = both.ConverterAll(new Converter<string, PalabraPosiciones>(strToPalabrasPosiciones)); 

foreach(PalabraPosiciones aux in nuevaLista){
	Console.WriteLine(aux.ToString());
}

            Console.WriteLine("Hello World!");
            Console.ReadLine();
          PalabraPosiciones strToPalabrasPosiciones(string elem){
            PalabraPosiciones aux = new PalabraPosiciones(elem);
            for (int i= 0; i <= listaT.Count; i++){
		            aux.buscarYAgregarPosiciones(listaT[i], i);
		        }
            return aux; 
          } 



        }
                     
        
 
  
 

static void cargaDeTextos(Textos t){
   char[] delimiterChars = { ' ', ',', '.', ':', '(' , ')'  };
	
	Console.WriteLine("Inicio de carga de textos: ");
	int i = 1; 
	Console.WriteLine($"Ingrese nombre del texto {i}"); 
	string nombreArchivo = Console.ReadLine(); 
	while (nombreArchivo != "fin"){
		StreamReader sr = new StreamReader(nombreArchivo);
		if (! sr.EndOfStream) 
			t.AgregarTexto(sr.ReadToEnd());
		i++;
		Console.WriteLine($"Ingrese nombre del texto {i}"); 
		nombreArchivo = Console.ReadLine(); 		
	
	}

}

    }//programcs
class PalabraPosiciones{
    public string Palabra {private set; get; }
    public List<List<int>> Posiciones {private set; get; }= new List<List<int>>(); 
    
    public PalabraPosiciones(){}
    public PalabraPosiciones(string elem) => Palabra = elem; 

public void buscarYAgregarPosiciones(string unText, int nroLista){
	int end = unText.Length; 
	int ini = 0; 
	int at=0; 
	while ((ini <= end) && (at > -1)){
		at = unText.IndexOf (Palabra, ini, end); 
		if (at == -1) break;
		Posiciones[nroLista].Add(at);
		ini = at+1; 
	}
private void imprimirListaI (List<int> x){
	for (int i = 0; i<= x.Count; i++){
		Console.Write(x.Item[i]+" "); 
	}
}
public override string ToString(){	 
	string aux = $"Palabra: \"{Palabra}\"  \n "; 
	for (int i = 0; i <= Posiciones.Count; i++)
		aux += 
		$"|--Posiciones en Texto{i+1}:-->{this.imprimirListaI(Posiciones[i])}\n"; 	
	return aux; 
	
}
	
	
}//classPosiciones
  class Textos{
	public List<string> listaDeTextos {private set; get;} = new List<string>(); 
	
	public Textos(){}
	public Textos(string unTxt) => listaDeTextos.Add(unTxt); 
	
	public void AgregarTexto( string unTxt) => listaDeTextos.Add(unTxt); 
	
}

}//namespace

